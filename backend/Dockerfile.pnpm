# Stage 1: Build the application
FROM node:20-slim AS builder

WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy dependency manifests
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json ./

# Copy package.json files to leverage Docker cache
COPY packages/common/package.json ./packages/common/
COPY backend/package.json ./backend/

# Install all dependencies (including dev dependencies)
RUN pnpm install --filter @prnews/backend...

# Copy the rest of the source code
COPY packages/common/ ./packages/common/
COPY backend/ ./backend/

# Build the TypeScript code for the backend and its dependencies
ENV NODE_ENV=production
RUN pnpm --filter @prnews/backend... run build


# Stage 2: Create the production image
FROM node:20-slim

# Set NODE_ENV to production for the final image
ENV NODE_ENV=production
WORKDIR /app

# Install pnpm
RUN npm install -g pnpm

# Copy dependency manifests
COPY pnpm-lock.yaml pnpm-workspace.yaml package.json ./

# Copy package.json files
COPY packages/common/package.json ./packages/common/
COPY backend/package.json ./backend/

# Install only production dependencies for the backend and its workspace dependencies
RUN pnpm install --prod --filter @prnews/backend... --ignore-scripts

# Copy the built application code from the builder stage
COPY --from=builder /app/packages/common/dist ./packages/common/dist
COPY --from=builder /app/backend/dist ./backend/dist

WORKDIR /app/backend

# Start the application directly with node
CMD [ "node", "dist/index.js" ]